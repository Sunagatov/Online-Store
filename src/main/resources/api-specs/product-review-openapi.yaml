openapi: "3.0.3"

info:
  title: "Iced Latte Product's Review API"
  description: "API for accessing product's reviews and related operations in the Iced-Latte platform"
  version: "1.0.0"
  contact:
    name: "Iced Latte Support"
    email: "zufar.sunagatov@gmail.com"

servers:
  - url: "http://localhost:8083"
    description: "Local development server"
  - url: "https://il.pride.improwised.local/backend"
    description: "Production server"

tags:
  - name: "Product Review"
    description: "An API for product's review creation and modification"

paths:
  /api/v1/products/{productId}/reviews:
    get:
      tags:
        - "Product Review"
      description: "List product's Reviews with pagination, sorting and filtering features. Endpoint is available for unauthorized users"
      operationId: "getProductReviewsAndRatings"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product."
          schema:
            type: "string"
            format: "uuid"
        - name: "page"
          description: "The page number (starting from 0) for pagination. Possible allowed values: 1) page=0 or 2) page=1 or 3) any other non negative value."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 0
          examples:
            example1:
              description: "Retrieve the first page of product's list."
              value: "page=0"
            example2:
              description: "Retrieve the second page of product's list."
              value: "page=1"
        - name: "size"
          description: "The number of products per page. Possible allowed values: 1) size=3 or 2) size=15 or 3) any other non negative value."
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: 50
          examples:
            example1:
              description: "Display only 3 products per page in the product's review list."
              value: "size=3"
            example2:
              description: "Display only 15 products per page in the product's review list."
              value: "size=15"
        - name: "sort_attribute"
          description: "The field name of the product's review by which the results should be sorted. Possible allowed values: 1) sort_attribute=createdAt or 2) sort_attribute=productRating."
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
          examples:
            example1:
              description: "Display the product's review list sorted by the provided sort attribute 'createdAt' (the product's date of creation)."
              value: "sort_attribute=createdAt"
            example2:
              description: "Display the product's review list sorted by the provided sort attribute 'productRating' (the product's review rating)."
              value: "sort_attribute=averageRating"
        - name: "sort_direction"
          description: "The direction of sorting. Possible allowed values: 1) sort_direction=asc or 2) sort_direction=disc."
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
          examples:
            example1:
              description: "Display the product's review list in ascending order."
              value: "sort_direction=asc"
            example2:
              description: "Display the product's review list in descending order."
              value: "sort_direction=disc"
        - name: "product_ratings"
          description: "Filter product's reviews by selected product's ratings (comma-separated list). Possible allowed values: 1) product_ratings=1 or 2) product_ratings=1,2,3,4 or 3) product_ratings=1,3,5 or 4) any other comma-separated list within 1,2,3,4,5."
          examples:
            example1:
              description: "Display the product's review list filtered by selected product's ratings (product_ratings=1)."
              value: "product_ratings=1"
            example2:
              description: "Display the product's review list filtered by selected product's ratings (product_ratings==1,2,3,4)."
              value: "product_ratings=1,2,3,4"
            example3:
              description: "Display the product's review list filtered by selected product's ratings (product_ratings==1,3,5)."
              value: "product_ratings=1,3,5"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
      responses:
        "200":
          description: "The product was found and its reviews were returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewsAndRatingsWithPagination"
        "400":
          description: "Bad request, e.g. the query parameters are invalid."
        "404":
          description: "Product's review was not found."
        "500":
          description: "Internal server error occurred."

    post:
      tags:
        - "Product Review"
      summary: "Add a new product's review for a specific product by an authorized user. If product's review exists, then 400 error will be returned"
      operationId: "addNewProductReview"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductReviewRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewDto"
        "400":
          description: "Bad request, e.g. product's review exists"
        "401":
          description: "Unauthorized access occurred."
        "404":
          description: "Product's review was not found."
        "500":
          description: "Internal server error occurred."

  /api/v1/products/{productId}/reviews/{productReviewId}:
    delete:
      tags:
        - "Product Review"
      summary: "Delete an existing product's review created by an authorized user"
      operationId: "deleteProductReview"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product"
          schema:
            type: "string"
            format: "uuid"
        - name: "productReviewId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review"
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized access occurred."
        "404":
          description: "Product's review was not found."
        "500":
          description: "Internal server error occurred."

  /api/v1/products/{productId}/review:
    get:
      tags:
        - "Product Review"
      summary: "Return a product's review created by an authorized user"
      operationId: "getProductReview"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review."
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "Product's Review and Rating are returned. All fields are null, if user left no review for the product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewDto"
        "401":
          description: "Unauthorized access occurred."
        "500":
          description: "Internal server error occurred."

  /api/v1/products/{productId}/reviews/statistics:
    get:
      tags:
        - "Product Review"
      summary: "Returns statistics of product's review and rating : average rating, count of reviews, ratings map. The endpoint is available for unauthorized users"
      operationId: "getRatingAndReviewStat"
      parameters:
        - name: "productId"
          in: "path"
          description: "Id of the product to get rating for"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "Statistics of product's review and rating was retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewRatingStats"
        "404":
          description: "Product's review was not found"
        "500":
          description: "Internal server error occurred."

  /api/v1/products/{productId}/reviews/{productReviewId}/likes:
    post:
      tags:
        - "Product Review"
      summary: "Like or dislike a product's review, available for authorized users only"
      operationId: "addProductReviewLike"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review."
          schema:
            type: "string"
            format: "uuid"
        - name: "productReviewId"
          in: "path"
          required: true
          description: "Unique identifier of the product's review."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductReviewLikeDto"
      responses:
        "200":
          description: "Product's review was successfully liked/disliked"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductReviewDto"
        "401":
          description: "Unauthorized access occurred."
        "500":
          description: "Internal server error occurred."

components:
  schemas:
    ProductReviewRequest:
      type: "object"
      properties:
        text:
          type: "string"
          minLength: 1
          maxLength: 1500
        rating:
          type: "integer"
          minimum: 1
          maximum: 5
      required:
        - text
        - rating

    ProductReviewsAndRatingsWithPagination:
      type: "object"
      properties:
        reviewsWithRatings:
          type: "array"
          items:
            $ref: "#/components/schemas/ProductReviewDto"
        page:
          type: "integer"
          format: "int32"
        size:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int64"
        totalPages:
          type: "integer"
          format: "int32"

    ProductReviewDto:
      type: "object"
      description: "Object used to group product's reviews and ratings by user"
      required:
        - productReviewId
        - productId
        - productRating
        - text
        - createdAt
        - userName
        - userLastname
        - likesCount
        - dislikesCount
      properties:
        productReviewId:
          type: "string"
          format: "uuid"
        productId:
          type: "string"
          format: "uuid"
        productRating:
          type: "integer"
          format: "int32"
        text:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        userName:
          type: "string"
        userLastname:
          type: "string"
        likesCount:
          type: "integer"
          format: "int32"
        dislikesCount:
          type: "integer"
          format: "int32"

    ProductReviewRatingStats:
      type: object
      properties:
        productId:
          type: string
          format: "uuid"
        avgRating:
          type: string
        reviewsCount:
          type: "integer"
          format: "int32"
        ratingMap:
          $ref: "#/components/schemas/RatingMap"
      required:
        - productId
        - avgRating
        - reviewsCount
        - ratingMap

    RatingMap:
      type: object
      properties:
        star5:
          type: "integer"
          format: "int32"
          default: 0
        star4:
          type: "integer"
          format: "int32"
          default: 0
        star3:
          type: "integer"
          format: "int32"
          default: 0
        star2:
          type: "integer"
          format: "int32"
          default: 0
        star1:
          type: "integer"
          format: "int32"
          default: 0
      required:
        - "star1"
        - "star2"
        - "star3"
        - "star4"
        - "star5"

    ProductReviewLikeDto:
      type: object
      properties:
        isLike:
          type: "boolean"
      required:
        - isLike
