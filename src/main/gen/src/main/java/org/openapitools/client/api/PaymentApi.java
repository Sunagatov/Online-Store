/*
 * Iced Latte Payment API
 * API for accessing payment and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCardDetailsTokenRequest;
import org.openapitools.client.model.CreatePaymentRequest;
import org.openapitools.client.model.ErrorHandler;
import org.openapitools.client.model.ProcessedPaymentDetailsDto;
import org.openapitools.client.model.ProcessedPaymentWithClientSecretDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPaymentDetails
     * @param paymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment details not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentDetailsCall(Long paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/payment/{paymentId}"
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentDetailsValidateBeforeCall(Long paymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentDetailsCall(paymentId, _callback);
        return localVarCall;

    }

    /**
     * Enables to get payment details by payment id
     * 
     * @param paymentId  (required)
     * @return ProcessedPaymentDetailsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment details not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessedPaymentDetailsDto getPaymentDetails(Long paymentId) throws ApiException {
        ApiResponse<ProcessedPaymentDetailsDto> localVarResp = getPaymentDetailsWithHttpInfo(paymentId);
        return localVarResp.getData();
    }

    /**
     * Enables to get payment details by payment id
     * 
     * @param paymentId  (required)
     * @return ApiResponse&lt;ProcessedPaymentDetailsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment details not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessedPaymentDetailsDto> getPaymentDetailsWithHttpInfo(Long paymentId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentDetailsValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<ProcessedPaymentDetailsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables to get payment details by payment id (asynchronously)
     * 
     * @param paymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payment details not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentDetailsAsync(Long paymentId, final ApiCallback<ProcessedPaymentDetailsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentDetailsValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<ProcessedPaymentDetailsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentEventProcess
     * @param stripeSignature  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment event processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in processing the payment event. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentEventProcessCall(String stripeSignature, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/payment/event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stripeSignature != null) {
            localVarHeaderParams.put("Stripe-Signature", localVarApiClient.parameterToString(stripeSignature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentEventProcessValidateBeforeCall(String stripeSignature, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'stripeSignature' is set
        if (stripeSignature == null) {
            throw new ApiException("Missing the required parameter 'stripeSignature' when calling paymentEventProcess(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentEventProcess(Async)");
        }
        

        okhttp3.Call localVarCall = paymentEventProcessCall(stripeSignature, body, _callback);
        return localVarCall;

    }

    /**
     * Enables payment event processing
     * 
     * @param stripeSignature  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment event processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in processing the payment event. </td><td>  -  </td></tr>
     </table>
     */
    public void paymentEventProcess(String stripeSignature, String body) throws ApiException {
        paymentEventProcessWithHttpInfo(stripeSignature, body);
    }

    /**
     * Enables payment event processing
     * 
     * @param stripeSignature  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment event processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in processing the payment event. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentEventProcessWithHttpInfo(String stripeSignature, String body) throws ApiException {
        okhttp3.Call localVarCall = paymentEventProcessValidateBeforeCall(stripeSignature, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enables payment event processing (asynchronously)
     * 
     * @param stripeSignature  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment event processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in processing the payment event. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentEventProcessAsync(String stripeSignature, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentEventProcessValidateBeforeCall(stripeSignature, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for processCardDetailsToken
     * @param createCardDetailsTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card details token created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in card token creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processCardDetailsTokenCall(CreateCardDetailsTokenRequest createCardDetailsTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCardDetailsTokenRequest;

        // create path and map variables
        String localVarPath = "/api/v1/payment/card";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processCardDetailsTokenValidateBeforeCall(CreateCardDetailsTokenRequest createCardDetailsTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createCardDetailsTokenRequest' is set
        if (createCardDetailsTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'createCardDetailsTokenRequest' when calling processCardDetailsToken(Async)");
        }
        

        okhttp3.Call localVarCall = processCardDetailsTokenCall(createCardDetailsTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * Temporary solution to test the payment API by simulating card detail token generation.
     * 
     * @param createCardDetailsTokenRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card details token created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in card token creation. </td><td>  -  </td></tr>
     </table>
     */
    public String processCardDetailsToken(CreateCardDetailsTokenRequest createCardDetailsTokenRequest) throws ApiException {
        ApiResponse<String> localVarResp = processCardDetailsTokenWithHttpInfo(createCardDetailsTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Temporary solution to test the payment API by simulating card detail token generation.
     * 
     * @param createCardDetailsTokenRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card details token created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in card token creation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> processCardDetailsTokenWithHttpInfo(CreateCardDetailsTokenRequest createCardDetailsTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = processCardDetailsTokenValidateBeforeCall(createCardDetailsTokenRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Temporary solution to test the payment API by simulating card detail token generation. (asynchronously)
     * 
     * @param createCardDetailsTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card details token created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in card token creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processCardDetailsTokenAsync(CreateCardDetailsTokenRequest createCardDetailsTokenRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = processCardDetailsTokenValidateBeforeCall(createCardDetailsTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processPayment
     * @param createPaymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot retrieve stripe customer by stripeCustomerId &#x3D; {stripeCustomerId}. Cannot retrieve payment method associated with stripe customer, stripeCustomerId &#x3D; {stripeCustomerId}. The payment associated with customer is not found, stripeCustomerId &#x3D; {stripeCustomerId}. Shopping cart with shoppingCartId &#x3D; %s is already paid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user or payment was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processPaymentCall(CreatePaymentRequest createPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPaymentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processPaymentValidateBeforeCall(CreatePaymentRequest createPaymentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createPaymentRequest' is set
        if (createPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'createPaymentRequest' when calling processPayment(Async)");
        }
        

        okhttp3.Call localVarCall = processPaymentCall(createPaymentRequest, _callback);
        return localVarCall;

    }

    /**
     * Enables payment processing using a card details token ID
     * 
     * @param createPaymentRequest  (required)
     * @return ProcessedPaymentWithClientSecretDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot retrieve stripe customer by stripeCustomerId &#x3D; {stripeCustomerId}. Cannot retrieve payment method associated with stripe customer, stripeCustomerId &#x3D; {stripeCustomerId}. The payment associated with customer is not found, stripeCustomerId &#x3D; {stripeCustomerId}. Shopping cart with shoppingCartId &#x3D; %s is already paid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user or payment was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProcessedPaymentWithClientSecretDto processPayment(CreatePaymentRequest createPaymentRequest) throws ApiException {
        ApiResponse<ProcessedPaymentWithClientSecretDto> localVarResp = processPaymentWithHttpInfo(createPaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Enables payment processing using a card details token ID
     * 
     * @param createPaymentRequest  (required)
     * @return ApiResponse&lt;ProcessedPaymentWithClientSecretDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot retrieve stripe customer by stripeCustomerId &#x3D; {stripeCustomerId}. Cannot retrieve payment method associated with stripe customer, stripeCustomerId &#x3D; {stripeCustomerId}. The payment associated with customer is not found, stripeCustomerId &#x3D; {stripeCustomerId}. Shopping cart with shoppingCartId &#x3D; %s is already paid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user or payment was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessedPaymentWithClientSecretDto> processPaymentWithHttpInfo(CreatePaymentRequest createPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = processPaymentValidateBeforeCall(createPaymentRequest, null);
        Type localVarReturnType = new TypeToken<ProcessedPaymentWithClientSecretDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables payment processing using a card details token ID (asynchronously)
     * 
     * @param createPaymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment processed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Cannot retrieve stripe customer by stripeCustomerId &#x3D; {stripeCustomerId}. Cannot retrieve payment method associated with stripe customer, stripeCustomerId &#x3D; {stripeCustomerId}. The payment associated with customer is not found, stripeCustomerId &#x3D; {stripeCustomerId}. Shopping cart with shoppingCartId &#x3D; %s is already paid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested user or payment was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processPaymentAsync(CreatePaymentRequest createPaymentRequest, final ApiCallback<ProcessedPaymentWithClientSecretDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = processPaymentValidateBeforeCall(createPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessedPaymentWithClientSecretDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
