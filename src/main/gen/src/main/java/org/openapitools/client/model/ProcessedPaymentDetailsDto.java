/*
 * Iced Latte Payment API
 * API for accessing payment and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.PaymentStatus;
import org.openapitools.client.model.ShoppingCartItemDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProcessedPaymentDetailsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-03T11:21:37.753181100+02:00[Europe/Budapest]")
public class ProcessedPaymentDetailsDto {
  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private Long paymentId;

  public static final String SERIALIZED_NAME_ITEMS_TOTAL_PRICE = "itemsTotalPrice";
  @SerializedName(SERIALIZED_NAME_ITEMS_TOTAL_PRICE)
  private BigDecimal itemsTotalPrice;

  public static final String SERIALIZED_NAME_TAX_RATE = "taxRate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private BigDecimal shippingCost;

  public static final String SERIALIZED_NAME_PAYMENT_INTENT_ID = "paymentIntentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INTENT_ID)
  private String paymentIntentId;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private Set<ShoppingCartItemDto> items = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PaymentStatus status;

  public ProcessedPaymentDetailsDto() {
  }

  public ProcessedPaymentDetailsDto paymentId(Long paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Get paymentId
   * @return paymentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getPaymentId() {
    return paymentId;
  }


  public void setPaymentId(Long paymentId) {
    this.paymentId = paymentId;
  }


  public ProcessedPaymentDetailsDto itemsTotalPrice(BigDecimal itemsTotalPrice) {
    
    this.itemsTotalPrice = itemsTotalPrice;
    return this;
  }

   /**
   * Get itemsTotalPrice
   * @return itemsTotalPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getItemsTotalPrice() {
    return itemsTotalPrice;
  }


  public void setItemsTotalPrice(BigDecimal itemsTotalPrice) {
    this.itemsTotalPrice = itemsTotalPrice;
  }


  public ProcessedPaymentDetailsDto taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Get taxRate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public ProcessedPaymentDetailsDto shippingCost(BigDecimal shippingCost) {
    
    this.shippingCost = shippingCost;
    return this;
  }

   /**
   * Get shippingCost
   * @return shippingCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getShippingCost() {
    return shippingCost;
  }


  public void setShippingCost(BigDecimal shippingCost) {
    this.shippingCost = shippingCost;
  }


  public ProcessedPaymentDetailsDto paymentIntentId(String paymentIntentId) {
    
    this.paymentIntentId = paymentIntentId;
    return this;
  }

   /**
   * Get paymentIntentId
   * @return paymentIntentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentIntentId() {
    return paymentIntentId;
  }


  public void setPaymentIntentId(String paymentIntentId) {
    this.paymentIntentId = paymentIntentId;
  }


  public ProcessedPaymentDetailsDto items(Set<ShoppingCartItemDto> items) {
    
    this.items = items;
    return this;
  }

  public ProcessedPaymentDetailsDto addItemsItem(ShoppingCartItemDto itemsItem) {
    if (this.items == null) {
      this.items = new LinkedHashSet<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<ShoppingCartItemDto> getItems() {
    return items;
  }


  public void setItems(Set<ShoppingCartItemDto> items) {
    this.items = items;
  }


  public ProcessedPaymentDetailsDto status(PaymentStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentStatus getStatus() {
    return status;
  }


  public void setStatus(PaymentStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessedPaymentDetailsDto processedPaymentDetailsDto = (ProcessedPaymentDetailsDto) o;
    return Objects.equals(this.paymentId, processedPaymentDetailsDto.paymentId) &&
        Objects.equals(this.itemsTotalPrice, processedPaymentDetailsDto.itemsTotalPrice) &&
        Objects.equals(this.taxRate, processedPaymentDetailsDto.taxRate) &&
        Objects.equals(this.shippingCost, processedPaymentDetailsDto.shippingCost) &&
        Objects.equals(this.paymentIntentId, processedPaymentDetailsDto.paymentIntentId) &&
        Objects.equals(this.items, processedPaymentDetailsDto.items) &&
        Objects.equals(this.status, processedPaymentDetailsDto.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, itemsTotalPrice, taxRate, shippingCost, paymentIntentId, items, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessedPaymentDetailsDto {\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    itemsTotalPrice: ").append(toIndentedString(itemsTotalPrice)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    paymentIntentId: ").append(toIndentedString(paymentIntentId)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentId");
    openapiFields.add("itemsTotalPrice");
    openapiFields.add("taxRate");
    openapiFields.add("shippingCost");
    openapiFields.add("paymentIntentId");
    openapiFields.add("items");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProcessedPaymentDetailsDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProcessedPaymentDetailsDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessedPaymentDetailsDto is not found in the empty JSON string", ProcessedPaymentDetailsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProcessedPaymentDetailsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessedPaymentDetailsDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("paymentIntentId") != null && !jsonObj.get("paymentIntentId").isJsonNull()) && !jsonObj.get("paymentIntentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentIntentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentIntentId").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            ShoppingCartItemDto.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        PaymentStatus.validateJsonObject(jsonObj.getAsJsonObject("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessedPaymentDetailsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessedPaymentDetailsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessedPaymentDetailsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessedPaymentDetailsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessedPaymentDetailsDto>() {
           @Override
           public void write(JsonWriter out, ProcessedPaymentDetailsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessedPaymentDetailsDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProcessedPaymentDetailsDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProcessedPaymentDetailsDto
  * @throws IOException if the JSON string is invalid with respect to ProcessedPaymentDetailsDto
  */
  public static ProcessedPaymentDetailsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessedPaymentDetailsDto.class);
  }

 /**
  * Convert an instance of ProcessedPaymentDetailsDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

