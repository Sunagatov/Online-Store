/*
 * Iced Latte Order API
 * API allows users to access orders and related operations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.OrderItemResponseDto;
import org.openapitools.client.model.OrderStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response on successfully added or updated order
 */
@ApiModel(description = "Response on successfully added or updated order")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-03T11:21:31.568661400+02:00[Europe/Budapest]")
public class OrderResponseDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatus status;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItemResponseDto> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS_QUANTITY = "itemsQuantity";
  @SerializedName(SERIALIZED_NAME_ITEMS_QUANTITY)
  private Integer itemsQuantity;

  public static final String SERIALIZED_NAME_ITEMS_TOTAL_PRICE = "itemsTotalPrice";
  @SerializedName(SERIALIZED_NAME_ITEMS_TOTAL_PRICE)
  private BigDecimal itemsTotalPrice;

  public static final String SERIALIZED_NAME_DELIVERY_COST = "deliveryCost";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COST)
  private BigDecimal deliveryCost;

  public static final String SERIALIZED_NAME_TAX_COST = "taxCost";
  @SerializedName(SERIALIZED_NAME_TAX_COST)
  private BigDecimal taxCost;

  public static final String SERIALIZED_NAME_TOTAL_ORDER_COST = "totalOrderCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_ORDER_COST)
  private BigDecimal totalOrderCost;

  public static final String SERIALIZED_NAME_DELIVERY_INFO = "deliveryInfo";
  @SerializedName(SERIALIZED_NAME_DELIVERY_INFO)
  private String deliveryInfo;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipientName";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_RECIPIENT_SURNAME = "recipientSurname";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_SURNAME)
  private String recipientSurname;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public OrderResponseDto() {
  }

  public OrderResponseDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for the order
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unique identifier for the order")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public OrderResponseDto userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public OrderResponseDto status(OrderStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OrderStatus getStatus() {
    return status;
  }


  public void setStatus(OrderStatus status) {
    this.status = status;
  }


  public OrderResponseDto items(List<OrderItemResponseDto> items) {
    
    this.items = items;
    return this;
  }

  public OrderResponseDto addItemsItem(OrderItemResponseDto itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<OrderItemResponseDto> getItems() {
    return items;
  }


  public void setItems(List<OrderItemResponseDto> items) {
    this.items = items;
  }


  public OrderResponseDto itemsQuantity(Integer itemsQuantity) {
    
    this.itemsQuantity = itemsQuantity;
    return this;
  }

   /**
   * Quantity of all product items
   * @return itemsQuantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Quantity of all product items")

  public Integer getItemsQuantity() {
    return itemsQuantity;
  }


  public void setItemsQuantity(Integer itemsQuantity) {
    this.itemsQuantity = itemsQuantity;
  }


  public OrderResponseDto itemsTotalPrice(BigDecimal itemsTotalPrice) {
    
    this.itemsTotalPrice = itemsTotalPrice;
    return this;
  }

   /**
   * Total price of all product items
   * @return itemsTotalPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Total price of all product items")

  public BigDecimal getItemsTotalPrice() {
    return itemsTotalPrice;
  }


  public void setItemsTotalPrice(BigDecimal itemsTotalPrice) {
    this.itemsTotalPrice = itemsTotalPrice;
  }


  public OrderResponseDto deliveryCost(BigDecimal deliveryCost) {
    
    this.deliveryCost = deliveryCost;
    return this;
  }

   /**
   * Get deliveryCost
   * @return deliveryCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getDeliveryCost() {
    return deliveryCost;
  }


  public void setDeliveryCost(BigDecimal deliveryCost) {
    this.deliveryCost = deliveryCost;
  }


  public OrderResponseDto taxCost(BigDecimal taxCost) {
    
    this.taxCost = taxCost;
    return this;
  }

   /**
   * Get taxCost
   * @return taxCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getTaxCost() {
    return taxCost;
  }


  public void setTaxCost(BigDecimal taxCost) {
    this.taxCost = taxCost;
  }


  public OrderResponseDto totalOrderCost(BigDecimal totalOrderCost) {
    
    this.totalOrderCost = totalOrderCost;
    return this;
  }

   /**
   * totalProductsCost + deliveryCost + taxCost
   * @return totalOrderCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "totalProductsCost + deliveryCost + taxCost")

  public BigDecimal getTotalOrderCost() {
    return totalOrderCost;
  }


  public void setTotalOrderCost(BigDecimal totalOrderCost) {
    this.totalOrderCost = totalOrderCost;
  }


  public OrderResponseDto deliveryInfo(String deliveryInfo) {
    
    this.deliveryInfo = deliveryInfo;
    return this;
  }

   /**
   * Order details, submitted to DB on the checkout stage
   * @return deliveryInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Order details, submitted to DB on the checkout stage")

  public String getDeliveryInfo() {
    return deliveryInfo;
  }


  public void setDeliveryInfo(String deliveryInfo) {
    this.deliveryInfo = deliveryInfo;
  }


  public OrderResponseDto recipientName(String recipientName) {
    
    this.recipientName = recipientName;
    return this;
  }

   /**
   * May be different from the user&#39;s name
   * @return recipientName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "May be different from the user's name")

  public String getRecipientName() {
    return recipientName;
  }


  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public OrderResponseDto recipientSurname(String recipientSurname) {
    
    this.recipientSurname = recipientSurname;
    return this;
  }

   /**
   * May be different from the user&#39;s surname
   * @return recipientSurname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "May be different from the user's surname")

  public String getRecipientSurname() {
    return recipientSurname;
  }


  public void setRecipientSurname(String recipientSurname) {
    this.recipientSurname = recipientSurname;
  }


  public OrderResponseDto email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * May be different from the user&#39;s email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "May be different from the user's email")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public OrderResponseDto phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * May be different from the user&#39;s phone
   * @return phoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "May be different from the user's phone")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public OrderResponseDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderResponseDto orderResponseDto = (OrderResponseDto) o;
    return Objects.equals(this.id, orderResponseDto.id) &&
        Objects.equals(this.userId, orderResponseDto.userId) &&
        Objects.equals(this.status, orderResponseDto.status) &&
        Objects.equals(this.items, orderResponseDto.items) &&
        Objects.equals(this.itemsQuantity, orderResponseDto.itemsQuantity) &&
        Objects.equals(this.itemsTotalPrice, orderResponseDto.itemsTotalPrice) &&
        Objects.equals(this.deliveryCost, orderResponseDto.deliveryCost) &&
        Objects.equals(this.taxCost, orderResponseDto.taxCost) &&
        Objects.equals(this.totalOrderCost, orderResponseDto.totalOrderCost) &&
        Objects.equals(this.deliveryInfo, orderResponseDto.deliveryInfo) &&
        Objects.equals(this.recipientName, orderResponseDto.recipientName) &&
        Objects.equals(this.recipientSurname, orderResponseDto.recipientSurname) &&
        Objects.equals(this.email, orderResponseDto.email) &&
        Objects.equals(this.phoneNumber, orderResponseDto.phoneNumber) &&
        Objects.equals(this.createdAt, orderResponseDto.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, status, items, itemsQuantity, itemsTotalPrice, deliveryCost, taxCost, totalOrderCost, deliveryInfo, recipientName, recipientSurname, email, phoneNumber, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderResponseDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    itemsQuantity: ").append(toIndentedString(itemsQuantity)).append("\n");
    sb.append("    itemsTotalPrice: ").append(toIndentedString(itemsTotalPrice)).append("\n");
    sb.append("    deliveryCost: ").append(toIndentedString(deliveryCost)).append("\n");
    sb.append("    taxCost: ").append(toIndentedString(taxCost)).append("\n");
    sb.append("    totalOrderCost: ").append(toIndentedString(totalOrderCost)).append("\n");
    sb.append("    deliveryInfo: ").append(toIndentedString(deliveryInfo)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    recipientSurname: ").append(toIndentedString(recipientSurname)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("status");
    openapiFields.add("items");
    openapiFields.add("itemsQuantity");
    openapiFields.add("itemsTotalPrice");
    openapiFields.add("deliveryCost");
    openapiFields.add("taxCost");
    openapiFields.add("totalOrderCost");
    openapiFields.add("deliveryInfo");
    openapiFields.add("recipientName");
    openapiFields.add("recipientSurname");
    openapiFields.add("email");
    openapiFields.add("phoneNumber");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("itemsQuantity");
    openapiRequiredFields.add("itemsTotalPrice");
    openapiRequiredFields.add("deliveryCost");
    openapiRequiredFields.add("taxCost");
    openapiRequiredFields.add("totalOrderCost");
    openapiRequiredFields.add("deliveryInfo");
    openapiRequiredFields.add("recipientName");
    openapiRequiredFields.add("recipientSurname");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("createdAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderResponseDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderResponseDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderResponseDto is not found in the empty JSON string", OrderResponseDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderResponseDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderResponseDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderResponseDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            OrderItemResponseDto.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("deliveryInfo") != null && !jsonObj.get("deliveryInfo").isJsonNull()) && !jsonObj.get("deliveryInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryInfo").toString()));
      }
      if ((jsonObj.get("recipientName") != null && !jsonObj.get("recipientName").isJsonNull()) && !jsonObj.get("recipientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientName").toString()));
      }
      if ((jsonObj.get("recipientSurname") != null && !jsonObj.get("recipientSurname").isJsonNull()) && !jsonObj.get("recipientSurname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientSurname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientSurname").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderResponseDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderResponseDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderResponseDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderResponseDto.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderResponseDto>() {
           @Override
           public void write(JsonWriter out, OrderResponseDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderResponseDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderResponseDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderResponseDto
  * @throws IOException if the JSON string is invalid with respect to OrderResponseDto
  */
  public static OrderResponseDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderResponseDto.class);
  }

 /**
  * Convert an instance of OrderResponseDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

