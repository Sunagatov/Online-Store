/*
 * Iced Latte Payment API
 * API for accessing payment and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ShippingAddressDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShippingInfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-03T11:21:37.753181100+02:00[Europe/Budapest]")
public class ShippingInfoDto {
  public static final String SERIALIZED_NAME_SHIPPING_USER_EMAIL = "shippingUserEmail";
  @SerializedName(SERIALIZED_NAME_SHIPPING_USER_EMAIL)
  private String shippingUserEmail;

  public static final String SERIALIZED_NAME_SHIPPING_USER_FIRST_NAME = "shippingUserFirstName";
  @SerializedName(SERIALIZED_NAME_SHIPPING_USER_FIRST_NAME)
  private String shippingUserFirstName;

  public static final String SERIALIZED_NAME_SHIPPING_USER_LAST_NAME = "shippingUserLastName";
  @SerializedName(SERIALIZED_NAME_SHIPPING_USER_LAST_NAME)
  private String shippingUserLastName;

  public static final String SERIALIZED_NAME_SHIPPING_USER_PHONE_NUMBER = "shippingUserPhoneNumber";
  @SerializedName(SERIALIZED_NAME_SHIPPING_USER_PHONE_NUMBER)
  private String shippingUserPhoneNumber;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private ShippingAddressDto shippingAddress;

  public ShippingInfoDto() {
  }

  public ShippingInfoDto shippingUserEmail(String shippingUserEmail) {
    
    this.shippingUserEmail = shippingUserEmail;
    return this;
  }

   /**
   * Email address of the user for shipping.
   * @return shippingUserEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Email address of the user for shipping.")

  public String getShippingUserEmail() {
    return shippingUserEmail;
  }


  public void setShippingUserEmail(String shippingUserEmail) {
    this.shippingUserEmail = shippingUserEmail;
  }


  public ShippingInfoDto shippingUserFirstName(String shippingUserFirstName) {
    
    this.shippingUserFirstName = shippingUserFirstName;
    return this;
  }

   /**
   * First name of the user for shipping.
   * @return shippingUserFirstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "First name of the user for shipping.")

  public String getShippingUserFirstName() {
    return shippingUserFirstName;
  }


  public void setShippingUserFirstName(String shippingUserFirstName) {
    this.shippingUserFirstName = shippingUserFirstName;
  }


  public ShippingInfoDto shippingUserLastName(String shippingUserLastName) {
    
    this.shippingUserLastName = shippingUserLastName;
    return this;
  }

   /**
   * Last name of the user for shipping.
   * @return shippingUserLastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last name of the user for shipping.")

  public String getShippingUserLastName() {
    return shippingUserLastName;
  }


  public void setShippingUserLastName(String shippingUserLastName) {
    this.shippingUserLastName = shippingUserLastName;
  }


  public ShippingInfoDto shippingUserPhoneNumber(String shippingUserPhoneNumber) {
    
    this.shippingUserPhoneNumber = shippingUserPhoneNumber;
    return this;
  }

   /**
   * The international phone number of the recipient.
   * @return shippingUserPhoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The international phone number of the recipient.")

  public String getShippingUserPhoneNumber() {
    return shippingUserPhoneNumber;
  }


  public void setShippingUserPhoneNumber(String shippingUserPhoneNumber) {
    this.shippingUserPhoneNumber = shippingUserPhoneNumber;
  }


  public ShippingInfoDto shippingMethod(String shippingMethod) {
    
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Method of shipping.
   * @return shippingMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Method of shipping.")

  public String getShippingMethod() {
    return shippingMethod;
  }


  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public ShippingInfoDto shippingAddress(ShippingAddressDto shippingAddress) {
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShippingAddressDto getShippingAddress() {
    return shippingAddress;
  }


  public void setShippingAddress(ShippingAddressDto shippingAddress) {
    this.shippingAddress = shippingAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingInfoDto shippingInfoDto = (ShippingInfoDto) o;
    return Objects.equals(this.shippingUserEmail, shippingInfoDto.shippingUserEmail) &&
        Objects.equals(this.shippingUserFirstName, shippingInfoDto.shippingUserFirstName) &&
        Objects.equals(this.shippingUserLastName, shippingInfoDto.shippingUserLastName) &&
        Objects.equals(this.shippingUserPhoneNumber, shippingInfoDto.shippingUserPhoneNumber) &&
        Objects.equals(this.shippingMethod, shippingInfoDto.shippingMethod) &&
        Objects.equals(this.shippingAddress, shippingInfoDto.shippingAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shippingUserEmail, shippingUserFirstName, shippingUserLastName, shippingUserPhoneNumber, shippingMethod, shippingAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingInfoDto {\n");
    sb.append("    shippingUserEmail: ").append(toIndentedString(shippingUserEmail)).append("\n");
    sb.append("    shippingUserFirstName: ").append(toIndentedString(shippingUserFirstName)).append("\n");
    sb.append("    shippingUserLastName: ").append(toIndentedString(shippingUserLastName)).append("\n");
    sb.append("    shippingUserPhoneNumber: ").append(toIndentedString(shippingUserPhoneNumber)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shippingUserEmail");
    openapiFields.add("shippingUserFirstName");
    openapiFields.add("shippingUserLastName");
    openapiFields.add("shippingUserPhoneNumber");
    openapiFields.add("shippingMethod");
    openapiFields.add("shippingAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shippingUserEmail");
    openapiRequiredFields.add("shippingUserFirstName");
    openapiRequiredFields.add("shippingUserLastName");
    openapiRequiredFields.add("shippingUserPhoneNumber");
    openapiRequiredFields.add("shippingMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShippingInfoDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ShippingInfoDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingInfoDto is not found in the empty JSON string", ShippingInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShippingInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingInfoDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingInfoDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("shippingUserEmail") != null && !jsonObj.get("shippingUserEmail").isJsonNull()) && !jsonObj.get("shippingUserEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingUserEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingUserEmail").toString()));
      }
      if ((jsonObj.get("shippingUserFirstName") != null && !jsonObj.get("shippingUserFirstName").isJsonNull()) && !jsonObj.get("shippingUserFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingUserFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingUserFirstName").toString()));
      }
      if ((jsonObj.get("shippingUserLastName") != null && !jsonObj.get("shippingUserLastName").isJsonNull()) && !jsonObj.get("shippingUserLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingUserLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingUserLastName").toString()));
      }
      if ((jsonObj.get("shippingUserPhoneNumber") != null && !jsonObj.get("shippingUserPhoneNumber").isJsonNull()) && !jsonObj.get("shippingUserPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingUserPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingUserPhoneNumber").toString()));
      }
      if ((jsonObj.get("shippingMethod") != null && !jsonObj.get("shippingMethod").isJsonNull()) && !jsonObj.get("shippingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethod").toString()));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        ShippingAddressDto.validateJsonObject(jsonObj.getAsJsonObject("shippingAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingInfoDto>() {
           @Override
           public void write(JsonWriter out, ShippingInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingInfoDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShippingInfoDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShippingInfoDto
  * @throws IOException if the JSON string is invalid with respect to ShippingInfoDto
  */
  public static ShippingInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingInfoDto.class);
  }

 /**
  * Convert an instance of ShippingInfoDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

