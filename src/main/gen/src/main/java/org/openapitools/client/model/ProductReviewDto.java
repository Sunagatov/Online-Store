/*
 * Iced Latte Product's Review API
 * API for accessing product's reviews and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object used to group product&#39;s reviews and ratings by user
 */
@ApiModel(description = "Object used to group product's reviews and ratings by user")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-03T11:21:57.601483+02:00[Europe/Budapest]")
public class ProductReviewDto {
  public static final String SERIALIZED_NAME_PRODUCT_REVIEW_ID = "productReviewId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REVIEW_ID)
  private UUID productReviewId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private UUID productId;

  public static final String SERIALIZED_NAME_PRODUCT_RATING = "productRating";
  @SerializedName(SERIALIZED_NAME_PRODUCT_RATING)
  private Integer productRating;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USER_LASTNAME = "userLastname";
  @SerializedName(SERIALIZED_NAME_USER_LASTNAME)
  private String userLastname;

  public static final String SERIALIZED_NAME_LIKES_COUNT = "likesCount";
  @SerializedName(SERIALIZED_NAME_LIKES_COUNT)
  private Integer likesCount;

  public static final String SERIALIZED_NAME_DISLIKES_COUNT = "dislikesCount";
  @SerializedName(SERIALIZED_NAME_DISLIKES_COUNT)
  private Integer dislikesCount;

  public ProductReviewDto() {
  }

  public ProductReviewDto productReviewId(UUID productReviewId) {
    
    this.productReviewId = productReviewId;
    return this;
  }

   /**
   * Get productReviewId
   * @return productReviewId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getProductReviewId() {
    return productReviewId;
  }


  public void setProductReviewId(UUID productReviewId) {
    this.productReviewId = productReviewId;
  }


  public ProductReviewDto productId(UUID productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getProductId() {
    return productId;
  }


  public void setProductId(UUID productId) {
    this.productId = productId;
  }


  public ProductReviewDto productRating(Integer productRating) {
    
    this.productRating = productRating;
    return this;
  }

   /**
   * Get productRating
   * @return productRating
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getProductRating() {
    return productRating;
  }


  public void setProductRating(Integer productRating) {
    this.productRating = productRating;
  }


  public ProductReviewDto text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public ProductReviewDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ProductReviewDto userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public ProductReviewDto userLastname(String userLastname) {
    
    this.userLastname = userLastname;
    return this;
  }

   /**
   * Get userLastname
   * @return userLastname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUserLastname() {
    return userLastname;
  }


  public void setUserLastname(String userLastname) {
    this.userLastname = userLastname;
  }


  public ProductReviewDto likesCount(Integer likesCount) {
    
    this.likesCount = likesCount;
    return this;
  }

   /**
   * Get likesCount
   * @return likesCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getLikesCount() {
    return likesCount;
  }


  public void setLikesCount(Integer likesCount) {
    this.likesCount = likesCount;
  }


  public ProductReviewDto dislikesCount(Integer dislikesCount) {
    
    this.dislikesCount = dislikesCount;
    return this;
  }

   /**
   * Get dislikesCount
   * @return dislikesCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDislikesCount() {
    return dislikesCount;
  }


  public void setDislikesCount(Integer dislikesCount) {
    this.dislikesCount = dislikesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductReviewDto productReviewDto = (ProductReviewDto) o;
    return Objects.equals(this.productReviewId, productReviewDto.productReviewId) &&
        Objects.equals(this.productId, productReviewDto.productId) &&
        Objects.equals(this.productRating, productReviewDto.productRating) &&
        Objects.equals(this.text, productReviewDto.text) &&
        Objects.equals(this.createdAt, productReviewDto.createdAt) &&
        Objects.equals(this.userName, productReviewDto.userName) &&
        Objects.equals(this.userLastname, productReviewDto.userLastname) &&
        Objects.equals(this.likesCount, productReviewDto.likesCount) &&
        Objects.equals(this.dislikesCount, productReviewDto.dislikesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productReviewId, productId, productRating, text, createdAt, userName, userLastname, likesCount, dislikesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductReviewDto {\n");
    sb.append("    productReviewId: ").append(toIndentedString(productReviewId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productRating: ").append(toIndentedString(productRating)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userLastname: ").append(toIndentedString(userLastname)).append("\n");
    sb.append("    likesCount: ").append(toIndentedString(likesCount)).append("\n");
    sb.append("    dislikesCount: ").append(toIndentedString(dislikesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productReviewId");
    openapiFields.add("productId");
    openapiFields.add("productRating");
    openapiFields.add("text");
    openapiFields.add("createdAt");
    openapiFields.add("userName");
    openapiFields.add("userLastname");
    openapiFields.add("likesCount");
    openapiFields.add("dislikesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("productReviewId");
    openapiRequiredFields.add("productId");
    openapiRequiredFields.add("productRating");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("userName");
    openapiRequiredFields.add("userLastname");
    openapiRequiredFields.add("likesCount");
    openapiRequiredFields.add("dislikesCount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductReviewDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProductReviewDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductReviewDto is not found in the empty JSON string", ProductReviewDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProductReviewDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductReviewDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductReviewDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("productReviewId") != null && !jsonObj.get("productReviewId").isJsonNull()) && !jsonObj.get("productReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productReviewId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("userLastname") != null && !jsonObj.get("userLastname").isJsonNull()) && !jsonObj.get("userLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLastname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductReviewDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductReviewDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductReviewDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductReviewDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductReviewDto>() {
           @Override
           public void write(JsonWriter out, ProductReviewDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductReviewDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductReviewDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductReviewDto
  * @throws IOException if the JSON string is invalid with respect to ProductReviewDto
  */
  public static ProductReviewDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductReviewDto.class);
  }

 /**
  * Convert an instance of ProductReviewDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

