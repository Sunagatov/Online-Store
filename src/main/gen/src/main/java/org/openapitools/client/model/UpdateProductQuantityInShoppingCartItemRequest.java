/*
 * Iced Latte Shopping Cart API
 * API allows users to manage their shopping cart items, including adding, updating, and deleting shopping cart items. It includes detailed error responses, supports authentication, and provides examples for better understanding.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateProductQuantityInShoppingCartItemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-03T11:21:18.673842900+02:00[Europe/Budapest]")
public class UpdateProductQuantityInShoppingCartItemRequest {
  public static final String SERIALIZED_NAME_SHOPPING_CART_ITEM_ID = "shoppingCartItemId";
  @SerializedName(SERIALIZED_NAME_SHOPPING_CART_ITEM_ID)
  private UUID shoppingCartItemId;

  public static final String SERIALIZED_NAME_PRODUCT_QUANTITY_CHANGE = "productQuantityChange";
  @SerializedName(SERIALIZED_NAME_PRODUCT_QUANTITY_CHANGE)
  private Integer productQuantityChange;

  public UpdateProductQuantityInShoppingCartItemRequest() {
  }

  public UpdateProductQuantityInShoppingCartItemRequest shoppingCartItemId(UUID shoppingCartItemId) {
    
    this.shoppingCartItemId = shoppingCartItemId;
    return this;
  }

   /**
   * Get shoppingCartItemId
   * @return shoppingCartItemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getShoppingCartItemId() {
    return shoppingCartItemId;
  }


  public void setShoppingCartItemId(UUID shoppingCartItemId) {
    this.shoppingCartItemId = shoppingCartItemId;
  }


  public UpdateProductQuantityInShoppingCartItemRequest productQuantityChange(Integer productQuantityChange) {
    
    this.productQuantityChange = productQuantityChange;
    return this;
  }

   /**
   * Get productQuantityChange
   * @return productQuantityChange
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getProductQuantityChange() {
    return productQuantityChange;
  }


  public void setProductQuantityChange(Integer productQuantityChange) {
    this.productQuantityChange = productQuantityChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProductQuantityInShoppingCartItemRequest updateProductQuantityInShoppingCartItemRequest = (UpdateProductQuantityInShoppingCartItemRequest) o;
    return Objects.equals(this.shoppingCartItemId, updateProductQuantityInShoppingCartItemRequest.shoppingCartItemId) &&
        Objects.equals(this.productQuantityChange, updateProductQuantityInShoppingCartItemRequest.productQuantityChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shoppingCartItemId, productQuantityChange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProductQuantityInShoppingCartItemRequest {\n");
    sb.append("    shoppingCartItemId: ").append(toIndentedString(shoppingCartItemId)).append("\n");
    sb.append("    productQuantityChange: ").append(toIndentedString(productQuantityChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shoppingCartItemId");
    openapiFields.add("productQuantityChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shoppingCartItemId");
    openapiRequiredFields.add("productQuantityChange");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateProductQuantityInShoppingCartItemRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UpdateProductQuantityInShoppingCartItemRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProductQuantityInShoppingCartItemRequest is not found in the empty JSON string", UpdateProductQuantityInShoppingCartItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateProductQuantityInShoppingCartItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProductQuantityInShoppingCartItemRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateProductQuantityInShoppingCartItemRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("shoppingCartItemId") != null && !jsonObj.get("shoppingCartItemId").isJsonNull()) && !jsonObj.get("shoppingCartItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shoppingCartItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shoppingCartItemId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProductQuantityInShoppingCartItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProductQuantityInShoppingCartItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProductQuantityInShoppingCartItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProductQuantityInShoppingCartItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProductQuantityInShoppingCartItemRequest>() {
           @Override
           public void write(JsonWriter out, UpdateProductQuantityInShoppingCartItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProductQuantityInShoppingCartItemRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateProductQuantityInShoppingCartItemRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateProductQuantityInShoppingCartItemRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateProductQuantityInShoppingCartItemRequest
  */
  public static UpdateProductQuantityInShoppingCartItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProductQuantityInShoppingCartItemRequest.class);
  }

 /**
  * Convert an instance of UpdateProductQuantityInShoppingCartItemRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

