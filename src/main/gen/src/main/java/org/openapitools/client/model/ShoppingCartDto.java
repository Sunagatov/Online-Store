/*
 * Iced Latte Shopping Cart API
 * API allows users to manage their shopping cart items, including adding, updating, and deleting shopping cart items. It includes detailed error responses, supports authentication, and provides examples for better understanding.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ShoppingCartItemDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShoppingCartDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-03T11:21:18.673842900+02:00[Europe/Budapest]")
public class ShoppingCartDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ShoppingCartItemDto> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS_QUANTITY = "itemsQuantity";
  @SerializedName(SERIALIZED_NAME_ITEMS_QUANTITY)
  private Integer itemsQuantity;

  public static final String SERIALIZED_NAME_ITEMS_TOTAL_PRICE = "itemsTotalPrice";
  @SerializedName(SERIALIZED_NAME_ITEMS_TOTAL_PRICE)
  private BigDecimal itemsTotalPrice;

  public static final String SERIALIZED_NAME_PRODUCTS_QUANTITY = "productsQuantity";
  @SerializedName(SERIALIZED_NAME_PRODUCTS_QUANTITY)
  private Integer productsQuantity;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closedAt";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public ShoppingCartDto() {
  }

  public ShoppingCartDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ShoppingCartDto userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public ShoppingCartDto items(List<ShoppingCartItemDto> items) {
    
    this.items = items;
    return this;
  }

  public ShoppingCartDto addItemsItem(ShoppingCartItemDto itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ShoppingCartItemDto> getItems() {
    return items;
  }


  public void setItems(List<ShoppingCartItemDto> items) {
    this.items = items;
  }


  public ShoppingCartDto itemsQuantity(Integer itemsQuantity) {
    
    this.itemsQuantity = itemsQuantity;
    return this;
  }

   /**
   * Get itemsQuantity
   * @return itemsQuantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getItemsQuantity() {
    return itemsQuantity;
  }


  public void setItemsQuantity(Integer itemsQuantity) {
    this.itemsQuantity = itemsQuantity;
  }


  public ShoppingCartDto itemsTotalPrice(BigDecimal itemsTotalPrice) {
    
    this.itemsTotalPrice = itemsTotalPrice;
    return this;
  }

   /**
   * Get itemsTotalPrice
   * @return itemsTotalPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getItemsTotalPrice() {
    return itemsTotalPrice;
  }


  public void setItemsTotalPrice(BigDecimal itemsTotalPrice) {
    this.itemsTotalPrice = itemsTotalPrice;
  }


  public ShoppingCartDto productsQuantity(Integer productsQuantity) {
    
    this.productsQuantity = productsQuantity;
    return this;
  }

   /**
   * Get productsQuantity
   * @return productsQuantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getProductsQuantity() {
    return productsQuantity;
  }


  public void setProductsQuantity(Integer productsQuantity) {
    this.productsQuantity = productsQuantity;
  }


  public ShoppingCartDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ShoppingCartDto closedAt(OffsetDateTime closedAt) {
    
    this.closedAt = closedAt;
    return this;
  }

   /**
   * Get closedAt
   * @return closedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getClosedAt() {
    return closedAt;
  }


  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShoppingCartDto shoppingCartDto = (ShoppingCartDto) o;
    return Objects.equals(this.id, shoppingCartDto.id) &&
        Objects.equals(this.userId, shoppingCartDto.userId) &&
        Objects.equals(this.items, shoppingCartDto.items) &&
        Objects.equals(this.itemsQuantity, shoppingCartDto.itemsQuantity) &&
        Objects.equals(this.itemsTotalPrice, shoppingCartDto.itemsTotalPrice) &&
        Objects.equals(this.productsQuantity, shoppingCartDto.productsQuantity) &&
        Objects.equals(this.createdAt, shoppingCartDto.createdAt) &&
        Objects.equals(this.closedAt, shoppingCartDto.closedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, items, itemsQuantity, itemsTotalPrice, productsQuantity, createdAt, closedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShoppingCartDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    itemsQuantity: ").append(toIndentedString(itemsQuantity)).append("\n");
    sb.append("    itemsTotalPrice: ").append(toIndentedString(itemsTotalPrice)).append("\n");
    sb.append("    productsQuantity: ").append(toIndentedString(productsQuantity)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("items");
    openapiFields.add("itemsQuantity");
    openapiFields.add("itemsTotalPrice");
    openapiFields.add("productsQuantity");
    openapiFields.add("createdAt");
    openapiFields.add("closedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("itemsQuantity");
    openapiRequiredFields.add("itemsTotalPrice");
    openapiRequiredFields.add("productsQuantity");
    openapiRequiredFields.add("createdAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShoppingCartDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ShoppingCartDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShoppingCartDto is not found in the empty JSON string", ShoppingCartDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ShoppingCartDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShoppingCartDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShoppingCartDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            ShoppingCartItemDto.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShoppingCartDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShoppingCartDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShoppingCartDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShoppingCartDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ShoppingCartDto>() {
           @Override
           public void write(JsonWriter out, ShoppingCartDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShoppingCartDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShoppingCartDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShoppingCartDto
  * @throws IOException if the JSON string is invalid with respect to ShoppingCartDto
  */
  public static ShoppingCartDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShoppingCartDto.class);
  }

 /**
  * Convert an instance of ShoppingCartDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

