/*
 * Iced Latte Shopping Cart API
 * API allows users to manage their shopping cart items, including adding, updating, and deleting shopping cart items. It includes detailed error responses, supports authentication, and provides examples for better understanding.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddNewItemsToShoppingCartRequest;
import org.openapitools.client.model.DeleteItemsFromShoppingCartRequest;
import org.openapitools.client.model.ShoppingCartDto;
import org.openapitools.client.model.UpdateProductQuantityInShoppingCartItemRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShoppingCartApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShoppingCartApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShoppingCartApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewItemToShoppingCart
     * @param addNewItemsToShoppingCartRequest Payload containing a list of items to be added to the shopping cart. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewItemToShoppingCartCall(AddNewItemsToShoppingCartRequest addNewItemsToShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addNewItemsToShoppingCartRequest;

        // create path and map variables
        String localVarPath = "/api/v1/cart/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewItemToShoppingCartValidateBeforeCall(AddNewItemsToShoppingCartRequest addNewItemsToShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addNewItemsToShoppingCartRequest' is set
        if (addNewItemsToShoppingCartRequest == null) {
            throw new ApiException("Missing the required parameter 'addNewItemsToShoppingCartRequest' when calling addNewItemToShoppingCart(Async)");
        }
        

        okhttp3.Call localVarCall = addNewItemToShoppingCartCall(addNewItemsToShoppingCartRequest, _callback);
        return localVarCall;

    }

    /**
     * Add items to the shopping cart
     * 
     * @param addNewItemsToShoppingCartRequest Payload containing a list of items to be added to the shopping cart. (required)
     * @return ShoppingCartDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingCartDto addNewItemToShoppingCart(AddNewItemsToShoppingCartRequest addNewItemsToShoppingCartRequest) throws ApiException {
        ApiResponse<ShoppingCartDto> localVarResp = addNewItemToShoppingCartWithHttpInfo(addNewItemsToShoppingCartRequest);
        return localVarResp.getData();
    }

    /**
     * Add items to the shopping cart
     * 
     * @param addNewItemsToShoppingCartRequest Payload containing a list of items to be added to the shopping cart. (required)
     * @return ApiResponse&lt;ShoppingCartDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingCartDto> addNewItemToShoppingCartWithHttpInfo(AddNewItemsToShoppingCartRequest addNewItemsToShoppingCartRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewItemToShoppingCartValidateBeforeCall(addNewItemsToShoppingCartRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add items to the shopping cart (asynchronously)
     * 
     * @param addNewItemsToShoppingCartRequest Payload containing a list of items to be added to the shopping cart. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewItemToShoppingCartAsync(AddNewItemsToShoppingCartRequest addNewItemsToShoppingCartRequest, final ApiCallback<ShoppingCartDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewItemToShoppingCartValidateBeforeCall(addNewItemsToShoppingCartRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItemsFromShoppingCart
     * @param deleteItemsFromShoppingCartRequest Payload containing an array of shopping cart item IDs to be removed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemsFromShoppingCartCall(DeleteItemsFromShoppingCartRequest deleteItemsFromShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteItemsFromShoppingCartRequest;

        // create path and map variables
        String localVarPath = "/api/v1/cart/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemsFromShoppingCartValidateBeforeCall(DeleteItemsFromShoppingCartRequest deleteItemsFromShoppingCartRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deleteItemsFromShoppingCartRequest' is set
        if (deleteItemsFromShoppingCartRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteItemsFromShoppingCartRequest' when calling deleteItemsFromShoppingCart(Async)");
        }
        

        okhttp3.Call localVarCall = deleteItemsFromShoppingCartCall(deleteItemsFromShoppingCartRequest, _callback);
        return localVarCall;

    }

    /**
     * Remove items from the shopping cart
     * 
     * @param deleteItemsFromShoppingCartRequest Payload containing an array of shopping cart item IDs to be removed. (required)
     * @return ShoppingCartDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingCartDto deleteItemsFromShoppingCart(DeleteItemsFromShoppingCartRequest deleteItemsFromShoppingCartRequest) throws ApiException {
        ApiResponse<ShoppingCartDto> localVarResp = deleteItemsFromShoppingCartWithHttpInfo(deleteItemsFromShoppingCartRequest);
        return localVarResp.getData();
    }

    /**
     * Remove items from the shopping cart
     * 
     * @param deleteItemsFromShoppingCartRequest Payload containing an array of shopping cart item IDs to be removed. (required)
     * @return ApiResponse&lt;ShoppingCartDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingCartDto> deleteItemsFromShoppingCartWithHttpInfo(DeleteItemsFromShoppingCartRequest deleteItemsFromShoppingCartRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteItemsFromShoppingCartValidateBeforeCall(deleteItemsFromShoppingCartRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove items from the shopping cart (asynchronously)
     * 
     * @param deleteItemsFromShoppingCartRequest Payload containing an array of shopping cart item IDs to be removed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Items removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemsFromShoppingCartAsync(DeleteItemsFromShoppingCartRequest deleteItemsFromShoppingCartRequest, final ApiCallback<ShoppingCartDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemsFromShoppingCartValidateBeforeCall(deleteItemsFromShoppingCartRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShoppingCart
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppingCartCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/cart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShoppingCartValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getShoppingCartCall(_callback);
        return localVarCall;

    }

    /**
     * Get the shopping cart of authorized user
     * Get the shopping cart of authorized user
     * @return ShoppingCartDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingCartDto getShoppingCart() throws ApiException {
        ApiResponse<ShoppingCartDto> localVarResp = getShoppingCartWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the shopping cart of authorized user
     * Get the shopping cart of authorized user
     * @return ApiResponse&lt;ShoppingCartDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingCartDto> getShoppingCartWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getShoppingCartValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the shopping cart of authorized user (asynchronously)
     * Get the shopping cart of authorized user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShoppingCartAsync(final ApiCallback<ShoppingCartDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShoppingCartValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductQuantityInShoppingCartItem
     * @param updateProductQuantityInShoppingCartItemRequest Payload containing the shopping cart item ID and the quantity change. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shopping cart item quantity was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductQuantityInShoppingCartItemCall(UpdateProductQuantityInShoppingCartItemRequest updateProductQuantityInShoppingCartItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProductQuantityInShoppingCartItemRequest;

        // create path and map variables
        String localVarPath = "/api/v1/cart/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductQuantityInShoppingCartItemValidateBeforeCall(UpdateProductQuantityInShoppingCartItemRequest updateProductQuantityInShoppingCartItemRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'updateProductQuantityInShoppingCartItemRequest' is set
        if (updateProductQuantityInShoppingCartItemRequest == null) {
            throw new ApiException("Missing the required parameter 'updateProductQuantityInShoppingCartItemRequest' when calling updateProductQuantityInShoppingCartItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductQuantityInShoppingCartItemCall(updateProductQuantityInShoppingCartItemRequest, _callback);
        return localVarCall;

    }

    /**
     * Update shopping cart item quantity
     * 
     * @param updateProductQuantityInShoppingCartItemRequest Payload containing the shopping cart item ID and the quantity change. (required)
     * @return ShoppingCartDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shopping cart item quantity was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ShoppingCartDto updateProductQuantityInShoppingCartItem(UpdateProductQuantityInShoppingCartItemRequest updateProductQuantityInShoppingCartItemRequest) throws ApiException {
        ApiResponse<ShoppingCartDto> localVarResp = updateProductQuantityInShoppingCartItemWithHttpInfo(updateProductQuantityInShoppingCartItemRequest);
        return localVarResp.getData();
    }

    /**
     * Update shopping cart item quantity
     * 
     * @param updateProductQuantityInShoppingCartItemRequest Payload containing the shopping cart item ID and the quantity change. (required)
     * @return ApiResponse&lt;ShoppingCartDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shopping cart item quantity was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShoppingCartDto> updateProductQuantityInShoppingCartItemWithHttpInfo(UpdateProductQuantityInShoppingCartItemRequest updateProductQuantityInShoppingCartItemRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductQuantityInShoppingCartItemValidateBeforeCall(updateProductQuantityInShoppingCartItemRequest, null);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update shopping cart item quantity (asynchronously)
     * 
     * @param updateProductQuantityInShoppingCartItemRequest Payload containing the shopping cart item ID and the quantity change. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shopping cart item quantity was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, object invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductQuantityInShoppingCartItemAsync(UpdateProductQuantityInShoppingCartItemRequest updateProductQuantityInShoppingCartItemRequest, final ApiCallback<ShoppingCartDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductQuantityInShoppingCartItemValidateBeforeCall(updateProductQuantityInShoppingCartItemRequest, _callback);
        Type localVarReturnType = new TypeToken<ShoppingCartDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
