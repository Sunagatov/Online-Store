/*
 * Iced Latte Product's Review API
 * API for accessing product's reviews and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProductReviewDto;
import org.openapitools.client.model.ProductReviewLikeDto;
import org.openapitools.client.model.ProductReviewRatingStats;
import org.openapitools.client.model.ProductReviewRequest;
import org.openapitools.client.model.ProductReviewsAndRatingsWithPagination;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductReviewApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductReviewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductReviewApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewProductReview
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. product&#39;s review exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewProductReviewCall(UUID productId, ProductReviewRequest productReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productReviewRequest;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}/reviews"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewProductReviewValidateBeforeCall(UUID productId, ProductReviewRequest productReviewRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling addNewProductReview(Async)");
        }
        
        // verify the required parameter 'productReviewRequest' is set
        if (productReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'productReviewRequest' when calling addNewProductReview(Async)");
        }
        

        okhttp3.Call localVarCall = addNewProductReviewCall(productId, productReviewRequest, _callback);
        return localVarCall;

    }

    /**
     * Add a new product&#39;s review for a specific product by an authorized user. If product&#39;s review exists, then 400 error will be returned
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewRequest  (required)
     * @return ProductReviewDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. product&#39;s review exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ProductReviewDto addNewProductReview(UUID productId, ProductReviewRequest productReviewRequest) throws ApiException {
        ApiResponse<ProductReviewDto> localVarResp = addNewProductReviewWithHttpInfo(productId, productReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new product&#39;s review for a specific product by an authorized user. If product&#39;s review exists, then 400 error will be returned
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewRequest  (required)
     * @return ApiResponse&lt;ProductReviewDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. product&#39;s review exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReviewDto> addNewProductReviewWithHttpInfo(UUID productId, ProductReviewRequest productReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewProductReviewValidateBeforeCall(productId, productReviewRequest, null);
        Type localVarReturnType = new TypeToken<ProductReviewDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new product&#39;s review for a specific product by an authorized user. If product&#39;s review exists, then 400 error will be returned (asynchronously)
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. product&#39;s review exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewProductReviewAsync(UUID productId, ProductReviewRequest productReviewRequest, final ApiCallback<ProductReviewDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewProductReviewValidateBeforeCall(productId, productReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductReviewDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProductReviewLike
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewId Unique identifier of the product&#39;s review. (required)
     * @param productReviewLikeDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s review was successfully liked/disliked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductReviewLikeCall(UUID productId, UUID productReviewId, ProductReviewLikeDto productReviewLikeDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productReviewLikeDto;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}/reviews/{productReviewId}/likes"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "productReviewId" + "\\}", localVarApiClient.escapeString(productReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductReviewLikeValidateBeforeCall(UUID productId, UUID productReviewId, ProductReviewLikeDto productReviewLikeDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling addProductReviewLike(Async)");
        }
        
        // verify the required parameter 'productReviewId' is set
        if (productReviewId == null) {
            throw new ApiException("Missing the required parameter 'productReviewId' when calling addProductReviewLike(Async)");
        }
        

        okhttp3.Call localVarCall = addProductReviewLikeCall(productId, productReviewId, productReviewLikeDto, _callback);
        return localVarCall;

    }

    /**
     * Like or dislike a product&#39;s review, available for authorized users only
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewId Unique identifier of the product&#39;s review. (required)
     * @param productReviewLikeDto  (optional)
     * @return ProductReviewDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s review was successfully liked/disliked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ProductReviewDto addProductReviewLike(UUID productId, UUID productReviewId, ProductReviewLikeDto productReviewLikeDto) throws ApiException {
        ApiResponse<ProductReviewDto> localVarResp = addProductReviewLikeWithHttpInfo(productId, productReviewId, productReviewLikeDto);
        return localVarResp.getData();
    }

    /**
     * Like or dislike a product&#39;s review, available for authorized users only
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewId Unique identifier of the product&#39;s review. (required)
     * @param productReviewLikeDto  (optional)
     * @return ApiResponse&lt;ProductReviewDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s review was successfully liked/disliked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReviewDto> addProductReviewLikeWithHttpInfo(UUID productId, UUID productReviewId, ProductReviewLikeDto productReviewLikeDto) throws ApiException {
        okhttp3.Call localVarCall = addProductReviewLikeValidateBeforeCall(productId, productReviewId, productReviewLikeDto, null);
        Type localVarReturnType = new TypeToken<ProductReviewDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Like or dislike a product&#39;s review, available for authorized users only (asynchronously)
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param productReviewId Unique identifier of the product&#39;s review. (required)
     * @param productReviewLikeDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s review was successfully liked/disliked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductReviewLikeAsync(UUID productId, UUID productReviewId, ProductReviewLikeDto productReviewLikeDto, final ApiCallback<ProductReviewDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductReviewLikeValidateBeforeCall(productId, productReviewId, productReviewLikeDto, _callback);
        Type localVarReturnType = new TypeToken<ProductReviewDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductReview
     * @param productId Unique identifier of the product (required)
     * @param productReviewId Unique identifier of the product&#39;s review (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductReviewCall(UUID productId, UUID productReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}/reviews/{productReviewId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "productReviewId" + "\\}", localVarApiClient.escapeString(productReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductReviewValidateBeforeCall(UUID productId, UUID productReviewId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductReview(Async)");
        }
        
        // verify the required parameter 'productReviewId' is set
        if (productReviewId == null) {
            throw new ApiException("Missing the required parameter 'productReviewId' when calling deleteProductReview(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductReviewCall(productId, productReviewId, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing product&#39;s review created by an authorized user
     * 
     * @param productId Unique identifier of the product (required)
     * @param productReviewId Unique identifier of the product&#39;s review (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProductReview(UUID productId, UUID productReviewId) throws ApiException {
        deleteProductReviewWithHttpInfo(productId, productReviewId);
    }

    /**
     * Delete an existing product&#39;s review created by an authorized user
     * 
     * @param productId Unique identifier of the product (required)
     * @param productReviewId Unique identifier of the product&#39;s review (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductReviewWithHttpInfo(UUID productId, UUID productReviewId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductReviewValidateBeforeCall(productId, productReviewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing product&#39;s review created by an authorized user (asynchronously)
     * 
     * @param productId Unique identifier of the product (required)
     * @param productReviewId Unique identifier of the product&#39;s review (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductReviewAsync(UUID productId, UUID productReviewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductReviewValidateBeforeCall(productId, productReviewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductReview
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s Review and Rating are returned. All fields are null, if user left no review for the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductReviewCall(UUID productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}/review"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductReviewValidateBeforeCall(UUID productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductReview(Async)");
        }
        

        okhttp3.Call localVarCall = getProductReviewCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Return a product&#39;s review created by an authorized user
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @return ProductReviewDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s Review and Rating are returned. All fields are null, if user left no review for the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ProductReviewDto getProductReview(UUID productId) throws ApiException {
        ApiResponse<ProductReviewDto> localVarResp = getProductReviewWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Return a product&#39;s review created by an authorized user
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @return ApiResponse&lt;ProductReviewDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s Review and Rating are returned. All fields are null, if user left no review for the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReviewDto> getProductReviewWithHttpInfo(UUID productId) throws ApiException {
        okhttp3.Call localVarCall = getProductReviewValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<ProductReviewDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a product&#39;s review created by an authorized user (asynchronously)
     * 
     * @param productId Unique identifier of the product&#39;s review. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product&#39;s Review and Rating are returned. All fields are null, if user left no review for the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access occurred. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductReviewAsync(UUID productId, final ApiCallback<ProductReviewDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductReviewValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<ProductReviewDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductReviewsAndRatings
     * @param productId Unique identifier of the product. (required)
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product&#39;s review by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;createdAt or 2) sort_attribute&#x3D;productRating. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param productRatings Filter product&#39;s reviews by selected product&#39;s ratings (comma-separated list). Possible allowed values: 1) product_ratings&#x3D;1 or 2) product_ratings&#x3D;1,2,3,4 or 3) product_ratings&#x3D;1,3,5 or 4) any other comma-separated list within 1,2,3,4,5. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its reviews were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. the query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductReviewsAndRatingsCall(UUID productId, Integer page, Integer size, String sortAttribute, String sortDirection, List<Integer> productRatings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}/reviews"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sortAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_attribute", sortAttribute));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (productRatings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "product_ratings", productRatings));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductReviewsAndRatingsValidateBeforeCall(UUID productId, Integer page, Integer size, String sortAttribute, String sortDirection, List<Integer> productRatings, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductReviewsAndRatings(Async)");
        }
        

        okhttp3.Call localVarCall = getProductReviewsAndRatingsCall(productId, page, size, sortAttribute, sortDirection, productRatings, _callback);
        return localVarCall;

    }

    /**
     * 
     * List product&#39;s Reviews with pagination, sorting and filtering features. Endpoint is available for unauthorized users
     * @param productId Unique identifier of the product. (required)
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product&#39;s review by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;createdAt or 2) sort_attribute&#x3D;productRating. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param productRatings Filter product&#39;s reviews by selected product&#39;s ratings (comma-separated list). Possible allowed values: 1) product_ratings&#x3D;1 or 2) product_ratings&#x3D;1,2,3,4 or 3) product_ratings&#x3D;1,3,5 or 4) any other comma-separated list within 1,2,3,4,5. (optional)
     * @return ProductReviewsAndRatingsWithPagination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its reviews were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. the query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ProductReviewsAndRatingsWithPagination getProductReviewsAndRatings(UUID productId, Integer page, Integer size, String sortAttribute, String sortDirection, List<Integer> productRatings) throws ApiException {
        ApiResponse<ProductReviewsAndRatingsWithPagination> localVarResp = getProductReviewsAndRatingsWithHttpInfo(productId, page, size, sortAttribute, sortDirection, productRatings);
        return localVarResp.getData();
    }

    /**
     * 
     * List product&#39;s Reviews with pagination, sorting and filtering features. Endpoint is available for unauthorized users
     * @param productId Unique identifier of the product. (required)
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product&#39;s review by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;createdAt or 2) sort_attribute&#x3D;productRating. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param productRatings Filter product&#39;s reviews by selected product&#39;s ratings (comma-separated list). Possible allowed values: 1) product_ratings&#x3D;1 or 2) product_ratings&#x3D;1,2,3,4 or 3) product_ratings&#x3D;1,3,5 or 4) any other comma-separated list within 1,2,3,4,5. (optional)
     * @return ApiResponse&lt;ProductReviewsAndRatingsWithPagination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its reviews were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. the query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReviewsAndRatingsWithPagination> getProductReviewsAndRatingsWithHttpInfo(UUID productId, Integer page, Integer size, String sortAttribute, String sortDirection, List<Integer> productRatings) throws ApiException {
        okhttp3.Call localVarCall = getProductReviewsAndRatingsValidateBeforeCall(productId, page, size, sortAttribute, sortDirection, productRatings, null);
        Type localVarReturnType = new TypeToken<ProductReviewsAndRatingsWithPagination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List product&#39;s Reviews with pagination, sorting and filtering features. Endpoint is available for unauthorized users
     * @param productId Unique identifier of the product. (required)
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product&#39;s review by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;createdAt or 2) sort_attribute&#x3D;productRating. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param productRatings Filter product&#39;s reviews by selected product&#39;s ratings (comma-separated list). Possible allowed values: 1) product_ratings&#x3D;1 or 2) product_ratings&#x3D;1,2,3,4 or 3) product_ratings&#x3D;1,3,5 or 4) any other comma-separated list within 1,2,3,4,5. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its reviews were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, e.g. the query parameters are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductReviewsAndRatingsAsync(UUID productId, Integer page, Integer size, String sortAttribute, String sortDirection, List<Integer> productRatings, final ApiCallback<ProductReviewsAndRatingsWithPagination> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductReviewsAndRatingsValidateBeforeCall(productId, page, size, sortAttribute, sortDirection, productRatings, _callback);
        Type localVarReturnType = new TypeToken<ProductReviewsAndRatingsWithPagination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRatingAndReviewStat
     * @param productId Id of the product to get rating for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics of product&#39;s review and rating was retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRatingAndReviewStatCall(UUID productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}/reviews/statistics"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRatingAndReviewStatValidateBeforeCall(UUID productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getRatingAndReviewStat(Async)");
        }
        

        okhttp3.Call localVarCall = getRatingAndReviewStatCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Returns statistics of product&#39;s review and rating : average rating, count of reviews, ratings map. The endpoint is available for unauthorized users
     * 
     * @param productId Id of the product to get rating for (required)
     * @return ProductReviewRatingStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics of product&#39;s review and rating was retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ProductReviewRatingStats getRatingAndReviewStat(UUID productId) throws ApiException {
        ApiResponse<ProductReviewRatingStats> localVarResp = getRatingAndReviewStatWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Returns statistics of product&#39;s review and rating : average rating, count of reviews, ratings map. The endpoint is available for unauthorized users
     * 
     * @param productId Id of the product to get rating for (required)
     * @return ApiResponse&lt;ProductReviewRatingStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics of product&#39;s review and rating was retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReviewRatingStats> getRatingAndReviewStatWithHttpInfo(UUID productId) throws ApiException {
        okhttp3.Call localVarCall = getRatingAndReviewStatValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<ProductReviewRatingStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns statistics of product&#39;s review and rating : average rating, count of reviews, ratings map. The endpoint is available for unauthorized users (asynchronously)
     * 
     * @param productId Id of the product to get rating for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statistics of product&#39;s review and rating was retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product&#39;s review was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRatingAndReviewStatAsync(UUID productId, final ApiCallback<ProductReviewRatingStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRatingAndReviewStatValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<ProductReviewRatingStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
