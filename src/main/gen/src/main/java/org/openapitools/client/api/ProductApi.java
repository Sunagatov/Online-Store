/*
 * Iced-Latte Product API
 * This API allows clients to interact with an Iced Latte's product catalog, including retrieval and listing of products.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ProductIdsDto;
import org.openapitools.client.model.ProductInfoDto;
import org.openapitools.client.model.ProductListWithPaginationInfoDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProductById
     * @param productId Unique identifier of the product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its details are returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No product found for the given ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductByIdCall(UUID productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductByIdValidateBeforeCall(UUID productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductById(Async)");
        }
        

        okhttp3.Call localVarCall = getProductByIdCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a Product by ID
     * Fetch detailed information of a single product using its unique identifier.
     * @param productId Unique identifier of the product. (required)
     * @return ProductInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its details are returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No product found for the given ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ProductInfoDto getProductById(UUID productId) throws ApiException {
        ApiResponse<ProductInfoDto> localVarResp = getProductByIdWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Product by ID
     * Fetch detailed information of a single product using its unique identifier.
     * @param productId Unique identifier of the product. (required)
     * @return ApiResponse&lt;ProductInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its details are returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No product found for the given ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductInfoDto> getProductByIdWithHttpInfo(UUID productId) throws ApiException {
        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<ProductInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Product by ID (asynchronously)
     * Fetch detailed information of a single product using its unique identifier.
     * @param productId Unique identifier of the product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The product was found and its details are returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No product found for the given ID. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductByIdAsync(UUID productId, final ApiCallback<ProductInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductByIdValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<ProductInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProducts
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;name or 2) sort_attribute&#x3D;price or 3) sort_attribute&#x3D;quantity or 4) sort_attribute&#x3D;averageRating or 5) sort_attribute&#x3D;reviewsCount. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param minPrice Filter products by the lower limit of the product&#39;s price. Possible allowed values: 1) min_price&#x3D;5 or 2) min_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param maxPrice Filter products by the upper limit of the product&#39;s price. Possible allowed values: 1) max_price&#x3D;5 or 2) max_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param minimumAverageRating Filter products by the minimum average rating. Possible allowed values: 1) minimum_average_rating&#x3D;1 or 2) minimum_average_rating&#x3D;2 or 3) minimum_average_rating&#x3D;3 or 4) minimum_average_rating&#x3D;4  (optional)
     * @param brandNames Filter products by selected brand names (comma-separated list). Possible allowed values: 1) brand_names&#x3D;Starbucks or 2) brand_names&#x3D;Starbucks,Folgers or 3) any other comma-separated list (optional)
     * @param sellerNames Filter products by selected seller names (comma-separated list). Possible allowed values: 1) seller_names&#x3D;BeanBrewers,JavaBeanCoffee,MorningMug or 2) seller_names&#x3D;BeanBrewers or 3) any other comma-separated list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided for pagination or/and sorting or/and filtering. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCall(Integer page, Integer size, String sortAttribute, String sortDirection, BigDecimal minPrice, BigDecimal maxPrice, Integer minimumAverageRating, List<String> brandNames, List<String> sellerNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sortAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_attribute", sortAttribute));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        if (minimumAverageRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimum_average_rating", minimumAverageRating));
        }

        if (brandNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "brand_names", brandNames));
        }

        if (sellerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "seller_names", sellerNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsValidateBeforeCall(Integer page, Integer size, String sortAttribute, String sortDirection, BigDecimal minPrice, BigDecimal maxPrice, Integer minimumAverageRating, List<String> brandNames, List<String> sellerNames, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProductsCall(page, size, sortAttribute, sortDirection, minPrice, maxPrice, minimumAverageRating, brandNames, sellerNames, _callback);
        return localVarCall;

    }

    /**
     * List Products with pagination, sorting and filtering features.
     * Retrieve a paginated list of products, with optional sorting and filtering parameters.
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;name or 2) sort_attribute&#x3D;price or 3) sort_attribute&#x3D;quantity or 4) sort_attribute&#x3D;averageRating or 5) sort_attribute&#x3D;reviewsCount. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param minPrice Filter products by the lower limit of the product&#39;s price. Possible allowed values: 1) min_price&#x3D;5 or 2) min_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param maxPrice Filter products by the upper limit of the product&#39;s price. Possible allowed values: 1) max_price&#x3D;5 or 2) max_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param minimumAverageRating Filter products by the minimum average rating. Possible allowed values: 1) minimum_average_rating&#x3D;1 or 2) minimum_average_rating&#x3D;2 or 3) minimum_average_rating&#x3D;3 or 4) minimum_average_rating&#x3D;4  (optional)
     * @param brandNames Filter products by selected brand names (comma-separated list). Possible allowed values: 1) brand_names&#x3D;Starbucks or 2) brand_names&#x3D;Starbucks,Folgers or 3) any other comma-separated list (optional)
     * @param sellerNames Filter products by selected seller names (comma-separated list). Possible allowed values: 1) seller_names&#x3D;BeanBrewers,JavaBeanCoffee,MorningMug or 2) seller_names&#x3D;BeanBrewers or 3) any other comma-separated list (optional)
     * @return ProductListWithPaginationInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided for pagination or/and sorting or/and filtering. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ProductListWithPaginationInfoDto getProducts(Integer page, Integer size, String sortAttribute, String sortDirection, BigDecimal minPrice, BigDecimal maxPrice, Integer minimumAverageRating, List<String> brandNames, List<String> sellerNames) throws ApiException {
        ApiResponse<ProductListWithPaginationInfoDto> localVarResp = getProductsWithHttpInfo(page, size, sortAttribute, sortDirection, minPrice, maxPrice, minimumAverageRating, brandNames, sellerNames);
        return localVarResp.getData();
    }

    /**
     * List Products with pagination, sorting and filtering features.
     * Retrieve a paginated list of products, with optional sorting and filtering parameters.
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;name or 2) sort_attribute&#x3D;price or 3) sort_attribute&#x3D;quantity or 4) sort_attribute&#x3D;averageRating or 5) sort_attribute&#x3D;reviewsCount. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param minPrice Filter products by the lower limit of the product&#39;s price. Possible allowed values: 1) min_price&#x3D;5 or 2) min_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param maxPrice Filter products by the upper limit of the product&#39;s price. Possible allowed values: 1) max_price&#x3D;5 or 2) max_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param minimumAverageRating Filter products by the minimum average rating. Possible allowed values: 1) minimum_average_rating&#x3D;1 or 2) minimum_average_rating&#x3D;2 or 3) minimum_average_rating&#x3D;3 or 4) minimum_average_rating&#x3D;4  (optional)
     * @param brandNames Filter products by selected brand names (comma-separated list). Possible allowed values: 1) brand_names&#x3D;Starbucks or 2) brand_names&#x3D;Starbucks,Folgers or 3) any other comma-separated list (optional)
     * @param sellerNames Filter products by selected seller names (comma-separated list). Possible allowed values: 1) seller_names&#x3D;BeanBrewers,JavaBeanCoffee,MorningMug or 2) seller_names&#x3D;BeanBrewers or 3) any other comma-separated list (optional)
     * @return ApiResponse&lt;ProductListWithPaginationInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided for pagination or/and sorting or/and filtering. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductListWithPaginationInfoDto> getProductsWithHttpInfo(Integer page, Integer size, String sortAttribute, String sortDirection, BigDecimal minPrice, BigDecimal maxPrice, Integer minimumAverageRating, List<String> brandNames, List<String> sellerNames) throws ApiException {
        okhttp3.Call localVarCall = getProductsValidateBeforeCall(page, size, sortAttribute, sortDirection, minPrice, maxPrice, minimumAverageRating, brandNames, sellerNames, null);
        Type localVarReturnType = new TypeToken<ProductListWithPaginationInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Products with pagination, sorting and filtering features. (asynchronously)
     * Retrieve a paginated list of products, with optional sorting and filtering parameters.
     * @param page The page number (starting from 0) for pagination. Possible allowed values: 1) page&#x3D;0 or 2) page&#x3D;1 or 3) any other non negative value. (optional, default to 0)
     * @param size The number of products per page. Possible allowed values: 1) size&#x3D;3 or 2) size&#x3D;15 or 3) any other non negative value. (optional, default to 50)
     * @param sortAttribute The field name of the product by which the results should be sorted. Possible allowed values: 1) sort_attribute&#x3D;name or 2) sort_attribute&#x3D;price or 3) sort_attribute&#x3D;quantity or 4) sort_attribute&#x3D;averageRating or 5) sort_attribute&#x3D;reviewsCount. (optional, default to name)
     * @param sortDirection The direction of sorting. Possible allowed values: 1) sort_direction&#x3D;asc or 2) sort_direction&#x3D;disc. (optional, default to asc)
     * @param minPrice Filter products by the lower limit of the product&#39;s price. Possible allowed values: 1) min_price&#x3D;5 or 2) min_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param maxPrice Filter products by the upper limit of the product&#39;s price. Possible allowed values: 1) max_price&#x3D;5 or 2) max_price&#x3D;17.25 or 3) any other non negative integer or decimal number value. (optional)
     * @param minimumAverageRating Filter products by the minimum average rating. Possible allowed values: 1) minimum_average_rating&#x3D;1 or 2) minimum_average_rating&#x3D;2 or 3) minimum_average_rating&#x3D;3 or 4) minimum_average_rating&#x3D;4  (optional)
     * @param brandNames Filter products by selected brand names (comma-separated list). Possible allowed values: 1) brand_names&#x3D;Starbucks or 2) brand_names&#x3D;Starbucks,Folgers or 3) any other comma-separated list (optional)
     * @param sellerNames Filter products by selected seller names (comma-separated list). Possible allowed values: 1) seller_names&#x3D;BeanBrewers,JavaBeanCoffee,MorningMug or 2) seller_names&#x3D;BeanBrewers or 3) any other comma-separated list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of products retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided for pagination or/and sorting or/and filtering. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAsync(Integer page, Integer size, String sortAttribute, String sortDirection, BigDecimal minPrice, BigDecimal maxPrice, Integer minimumAverageRating, List<String> brandNames, List<String> sellerNames, final ApiCallback<ProductListWithPaginationInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsValidateBeforeCall(page, size, sortAttribute, sortDirection, minPrice, maxPrice, minimumAverageRating, brandNames, sellerNames, _callback);
        Type localVarReturnType = new TypeToken<ProductListWithPaginationInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsByIds
     * @param productIdsDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products by IDs retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByIdsCall(ProductIdsDto productIdsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productIdsDto;

        // create path and map variables
        String localVarPath = "/api/v1/products/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsByIdsValidateBeforeCall(ProductIdsDto productIdsDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productIdsDto' is set
        if (productIdsDto == null) {
            throw new ApiException("Missing the required parameter 'productIdsDto' when calling getProductsByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getProductsByIdsCall(productIdsDto, _callback);
        return localVarCall;

    }

    /**
     * List Products by IDs
     * Retrieve a list of products using a list of unique identifiers.
     * @param productIdsDto  (required)
     * @return List&lt;ProductInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products by IDs retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductInfoDto> getProductsByIds(ProductIdsDto productIdsDto) throws ApiException {
        ApiResponse<List<ProductInfoDto>> localVarResp = getProductsByIdsWithHttpInfo(productIdsDto);
        return localVarResp.getData();
    }

    /**
     * List Products by IDs
     * Retrieve a list of products using a list of unique identifiers.
     * @param productIdsDto  (required)
     * @return ApiResponse&lt;List&lt;ProductInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products by IDs retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductInfoDto>> getProductsByIdsWithHttpInfo(ProductIdsDto productIdsDto) throws ApiException {
        okhttp3.Call localVarCall = getProductsByIdsValidateBeforeCall(productIdsDto, null);
        Type localVarReturnType = new TypeToken<List<ProductInfoDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Products by IDs (asynchronously)
     * Retrieve a list of products using a list of unique identifiers.
     * @param productIdsDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products by IDs retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters provided. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByIdsAsync(ProductIdsDto productIdsDto, final ApiCallback<List<ProductInfoDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsByIdsValidateBeforeCall(productIdsDto, _callback);
        Type localVarReturnType = new TypeToken<List<ProductInfoDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
