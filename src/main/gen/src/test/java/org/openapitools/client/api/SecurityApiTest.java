/*
 * Iced Latte Security API
 * API for accessing security and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.ConfirmEmailRequest;
import org.openapitools.client.model.ForgotPasswordRequest;
import org.openapitools.client.model.UserAuthenticationRequest;
import org.openapitools.client.model.UserAuthenticationResponse;
import org.openapitools.client.model.UserRegistrationRequest;
import org.openapitools.client.model.UserRegistrationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityApi
 */
@Disabled
public class SecurityApiTest {

    private final SecurityApi api = new SecurityApi();

    /**
     * Authenticate a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateTest() throws ApiException {
        UserAuthenticationRequest userAuthenticationRequest = null;
        UserAuthenticationResponse response = api.authenticate(userAuthenticationRequest);
        // TODO: test validations
    }

    /**
     * Change password with verification code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        ChangePasswordRequest changePasswordRequest = null;
        api.changePassword(changePasswordRequest);
        // TODO: test validations
    }

    /**
     * Confirm an email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmEmailTest() throws ApiException {
        ConfirmEmailRequest confirmEmailRequest = null;
        UserRegistrationResponse response = api.confirmEmail(confirmEmailRequest);
        // TODO: test validations
    }

    /**
     * Send email with verification code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws ApiException {
        ForgotPasswordRequest forgotPasswordRequest = null;
        api.forgotPassword(forgotPasswordRequest);
        // TODO: test validations
    }

    /**
     * Get email code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailVerificationCodeTest() throws ApiException {
        UserRegistrationRequest userRegistrationRequest = null;
        String response = api.getEmailVerificationCode(userRegistrationRequest);
        // TODO: test validations
    }

    /**
     * Logout user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        api.logout();
        // TODO: test validations
    }

    /**
     * Refresh user token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshTokenTest() throws ApiException {
        UserAuthenticationResponse response = api.refreshToken();
        // TODO: test validations
    }

    /**
     * Register a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerTest() throws ApiException {
        UserRegistrationRequest userRegistrationRequest = null;
        String response = api.register(userRegistrationRequest);
        // TODO: test validations
    }

}
