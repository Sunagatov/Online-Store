/*
 * Iced Latte User API
 * API for accessing user profiles and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangeUserPasswordRequest;
import org.openapitools.client.model.ConfirmEmailRequest;
import java.io.File;
import org.openapitools.client.model.UpdateUserAccountRequest;
import org.openapitools.client.model.UserDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Change a user&#39;s password
     *
     * Change the password for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeUserPasswordTest() throws ApiException {
        ChangeUserPasswordRequest changeUserPasswordRequest = null;
        api.changeUserPassword(changeUserPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reset user password confirm
     *
     * Reset user password confirm
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmResetUserPasswordTest() throws ApiException {
        ConfirmEmailRequest confirmEmailRequest = null;
        api.confirmResetUserPassword(confirmEmailRequest);
        // TODO: test validations
    }

    /**
     * Delete user avatar
     *
     * Delete the user&#39;s avatar image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAvatarTest() throws ApiException {
        api.deleteUserAvatar();
        // TODO: test validations
    }

    /**
     * Delete an user by its ID
     *
     * Delete a user profile for the given user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserByIdTest() throws ApiException {
        api.deleteUserById();
        // TODO: test validations
    }

    /**
     * Edit an user&#39;s details by its ID
     *
     * Edit a user&#39;s details for the given user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editUserByIdTest() throws ApiException {
        UpdateUserAccountRequest updateUserAccountRequest = null;
        UserDto response = api.editUserById(updateUserAccountRequest);
        // TODO: test validations
    }

    /**
     * Get user avatar link
     *
     * Get the link to the user&#39;s avatar image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAvatarLinkTest() throws ApiException {
        String response = api.getUserAvatarLink();
        // TODO: test validations
    }

    /**
     * Get an user by its ID
     *
     * Fetches an user&#39;s details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        UserDto response = api.getUserById();
        // TODO: test validations
    }

    /**
     * Reset user password
     *
     * Reset user password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetUserPasswordTest() throws ApiException {
        api.resetUserPassword();
        // TODO: test validations
    }

    /**
     * Upload user avatar
     *
     * Upload a user&#39;s avatar image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadUserAvatarTest() throws ApiException {
        File _file = null;
        api.uploadUserAvatar(_file);
        // TODO: test validations
    }

}
