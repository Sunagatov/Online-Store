/*
 * Iced Latte Product's Review API
 * API for accessing product's reviews and related operations in the Iced-Latte platform
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductReviewDto;
import org.openapitools.client.model.ProductReviewLikeDto;
import org.openapitools.client.model.ProductReviewRatingStats;
import org.openapitools.client.model.ProductReviewRequest;
import org.openapitools.client.model.ProductReviewsAndRatingsWithPagination;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductReviewApi
 */
@Disabled
public class ProductReviewApiTest {

    private final ProductReviewApi api = new ProductReviewApi();

    /**
     * Add a new product&#39;s review for a specific product by an authorized user. If product&#39;s review exists, then 400 error will be returned
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewProductReviewTest() throws ApiException {
        UUID productId = null;
        ProductReviewRequest productReviewRequest = null;
        ProductReviewDto response = api.addNewProductReview(productId, productReviewRequest);
        // TODO: test validations
    }

    /**
     * Like or dislike a product&#39;s review, available for authorized users only
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductReviewLikeTest() throws ApiException {
        UUID productId = null;
        UUID productReviewId = null;
        ProductReviewLikeDto productReviewLikeDto = null;
        ProductReviewDto response = api.addProductReviewLike(productId, productReviewId, productReviewLikeDto);
        // TODO: test validations
    }

    /**
     * Delete an existing product&#39;s review created by an authorized user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductReviewTest() throws ApiException {
        UUID productId = null;
        UUID productReviewId = null;
        api.deleteProductReview(productId, productReviewId);
        // TODO: test validations
    }

    /**
     * Return a product&#39;s review created by an authorized user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductReviewTest() throws ApiException {
        UUID productId = null;
        ProductReviewDto response = api.getProductReview(productId);
        // TODO: test validations
    }

    /**
     * List product&#39;s Reviews with pagination, sorting and filtering features. Endpoint is available for unauthorized users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductReviewsAndRatingsTest() throws ApiException {
        UUID productId = null;
        Integer page = null;
        Integer size = null;
        String sortAttribute = null;
        String sortDirection = null;
        List<Integer> productRatings = null;
        ProductReviewsAndRatingsWithPagination response = api.getProductReviewsAndRatings(productId, page, size, sortAttribute, sortDirection, productRatings);
        // TODO: test validations
    }

    /**
     * Returns statistics of product&#39;s review and rating : average rating, count of reviews, ratings map. The endpoint is available for unauthorized users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRatingAndReviewStatTest() throws ApiException {
        UUID productId = null;
        ProductReviewRatingStats response = api.getRatingAndReviewStat(productId);
        // TODO: test validations
    }

}
