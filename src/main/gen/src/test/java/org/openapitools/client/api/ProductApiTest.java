/*
 * Iced-Latte Product API
 * This API allows clients to interact with an Iced Latte's product catalog, including retrieval and listing of products.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zufar.sunagatov@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ProductIdsDto;
import org.openapitools.client.model.ProductInfoDto;
import org.openapitools.client.model.ProductListWithPaginationInfoDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    /**
     * Retrieve a Product by ID
     *
     * Fetch detailed information of a single product using its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductByIdTest() throws ApiException {
        UUID productId = null;
        ProductInfoDto response = api.getProductById(productId);
        // TODO: test validations
    }

    /**
     * List Products with pagination, sorting and filtering features.
     *
     * Retrieve a paginated list of products, with optional sorting and filtering parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sortAttribute = null;
        String sortDirection = null;
        BigDecimal minPrice = null;
        BigDecimal maxPrice = null;
        Integer minimumAverageRating = null;
        List<String> brandNames = null;
        List<String> sellerNames = null;
        ProductListWithPaginationInfoDto response = api.getProducts(page, size, sortAttribute, sortDirection, minPrice, maxPrice, minimumAverageRating, brandNames, sellerNames);
        // TODO: test validations
    }

    /**
     * List Products by IDs
     *
     * Retrieve a list of products using a list of unique identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsByIdsTest() throws ApiException {
        ProductIdsDto productIdsDto = null;
        List<ProductInfoDto> response = api.getProductsByIds(productIdsDto);
        // TODO: test validations
    }

}
